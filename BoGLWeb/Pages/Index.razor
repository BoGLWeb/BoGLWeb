@inject IJSRuntime JS
@page "/"
@using System.Text;

<PageTitle>BoGLWeb</PageTitle>

<script suppress-error="BL9992" type="module" src="/build/build.js"></script>

<body>
    <div class="page">
        <main>
            <Menu Selectable=false Mode=MenuMode.Horizontal TriggerSubMenuAction=Trigger.Click>
                <li class="ant-menu-submenu ant-menu-submenu-horizontal boglLogo">
                    <img src="images/logo.png" width="50" />
                    <div id="logoSave">*</div>
                </li>
                <SubMenu title="File" Class="topMenu">
                    <MenuItem Key="setting:1">New</MenuItem>
                    <MenuItem Key="setting:2" OnClick="openBoGLFile">Open</MenuItem>
                    <MenuItem Key="setting:3">Save</MenuItem>
                    <MenuItem Key="setting:4" OnClick="saveAs">Save As</MenuItem>
                    <MenuItem Key="setting:5">Export as Image</MenuItem>
                    <MenuItem Key="setting:6">Exit</MenuItem>
                </SubMenu>
                <SubMenu title="Edit" Class="topMenu">
                    <MenuItem Key="setting:1">Cut</MenuItem>
                    <MenuItem Key="setting:2">Copy</MenuItem>
                    <MenuItem Key="setting:3">Paste</MenuItem>
                    <MenuItem Key="setting:4">Undo</MenuItem>
                    <MenuItem Key="setting:5">Redo</MenuItem>
                    <MenuItem Key="setting:6">Delete</MenuItem>
                </SubMenu>
                <SubMenu title="Help" Class="topMenu">
                    <MenuItem Key="setting:1"><Checkbox>Confirm deleting many items</Checkbox></MenuItem>
                    <MenuItem Key="setting:2">Tutorial</MenuItem>
                    <SubMenu Title="Example Files">
                        <SubMenu Title="Mechanical Translation">
                            <MenuItem Key="mt:1" OnClick="loadBasicTwoMass">Basic Two Mass System - 1</MenuItem>
                            <MenuItem Key="mt:2" OnClick="loadBasicTwoMass2">Basic Two Mass System - 2</MenuItem>
                            <MenuItem Key="mt:3" OnClick="loadBasicTwoMass3">Basic Two Mass System - 3</MenuItem>
                            <MenuItem Key="mt:4" OnClick="loadBasicQuarterCar">Quarter Car Model</MenuItem>
                            <MenuItem Key="mt:5" OnClick="loadBasicMassSpringDirections">Basic Mass, Spring System with Directions</MenuItem>
                            <MenuItem Key="mt:6" OnClick="loadSpringAndDamper">Spring and Damper with Force</MenuItem>
                        </SubMenu>
                        <SubMenu Title="Mechanical Rotation">
                            <MenuItem Key="mr:1" OnClick="loadRackandPinion">Rack and Pinion System</MenuItem>
                            <MenuItem Key="mr:2" OnClick="loadMotorShaft">Motor, Shaft and Gear Pair</MenuItem>
                        </SubMenu>
                        <SubMenu Title="Electrical">
                            <MenuItem Key="elec:1" OnClick="loadLRCCircuit">LRC Circuit</MenuItem>
                        </SubMenu>
                    </SubMenu>
                    <MenuItem Key="setting:4">Report Bugs</MenuItem>
                    <MenuItem Key="setting:5">About BoGL</MenuItem>
                </SubMenu>
                <li class="ant-menu-submenu ant-menu-submenu-horizontal iconDiv">
                    @{
                        RenderFragment SaveSvg =@<img class="menuIcon" src="images/menuBar/save.png" title="Save" />;
                        RenderFragment CutSvg=@<img class="menuIcon" src="images/menuBar/cut.png" title="Cut" />;
                        RenderFragment CopySvg=@<img class="menuIcon" src="images/menuBar/copy.png" title="Copy" />;
                        RenderFragment PasteSvg=@<img class="menuIcon" src="images/menuBar/paste.png" title="Paste" />;
                        RenderFragment UndoSvg=@<img class="menuIcon" src="images/menuBar/undo.png" title="Undo" />;
                        RenderFragment RedoSvg=@<img class="menuIcon" src="images/menuBar/redo.png" title="Redo" />;
                        RenderFragment TrashSvg=@<img class="menuIcon" src="images/menuBar/trash.png" title="Trash" />;
                    }
                    <Button Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="SaveSvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="CutSvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="CopySvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="PasteSvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="UndoSvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="RedoSvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="TrashSvg" />
                    </Button>
                </li>
            </Menu>
            <div class="pageContainer">
                <div id="graphMenu">
                    <Collapse Bordered="false">
                        <ExpandIconTemplate>
                            <Icon Type="down-circle" Rotate="@(context ? 180 : 0)" />
                        </ExpandIconTemplate>
                        <ChildContent>
                            <Button @onclick="generateButtonClicked">Generate</Button>
                            <Button @onclick="loadFile">LoadFile</Button>
                            <Progress Percent=@loadPercent ShowInfo="false"/>
                            <input @bind="fileToLoad" />
                            <Panel Header="Basic Mechanical Translation" Key="1">
                                <div id="mechTrans" class="elementHolder"></div>
                            </Panel>
                            <Panel Header="Basic Mechanical Rotation" Key="2">
                                <div id="mechRot" class="elementHolder"></div>
                            </Panel>
                            <Panel Header="Transmission Elements" Key="3">
                                <div id="transElem" class="elementHolder"></div>
                            </Panel>
                            <Panel Header="Electrical" Key="3">
                                <div id="electrical" class="elementHolder"></div>
                            </Panel>
                            <Panel Header="Actuators" Key="3">
                                <div id="actuators" class="elementHolder"></div>
                            </Panel>
                        </ChildContent>
                    </Collapse>
                </div>
                <div class="card-container">
                    <Tabs Type="@TabType.Card">
                        <TabPane Key="1" Tab="System" ForceRender=true>
                            <div id="systemDiagram"></div>
                        </TabPane>
                        <TabPane Key="2" Tab="Unsimplified BG" ForceRender=true>
                            <div id="unsimpBG"></div>
                        </TabPane>
                        <TabPane Key="3" Tab="Simplified BG" ForceRender=true>
                            <div id="simpBG"></div>
                        </TabPane>
                        <TabPane Key="4" Tab="Causal BG" ForceRender=true>
                            <div id="causalBG"></div>
                        </TabPane>
                    </Tabs>
                </div>
            </div>
        </main>
    </div>
</body>

@code {
    private readonly List<string> ruleNames = new List<string>();
    private readonly double totalRules = 19.0;
    private string fileToLoad = "";
    private double loadPercent = 0;

    protected override async Task OnInitializedAsync() {
        ruleNames.Add("BondGraphRuleset"); //58
        ruleNames.Add("SimplificationRuleset"); //28
        ruleNames.Add("DirRuleset"); //5
        ruleNames.Add("newDirectionRuleSet_2"); //17
        ruleNames.Add("DirRuleset3"); //4
        ruleNames.Add("Simplification2"); //32
        ruleNames.Add("NewCausalityMethodRuleset"); //6
        ruleNames.Add("NewCausalityMethodRuleset_2"); //4
        ruleNames.Add("NewCausalityMethodRuleset_3"); //2
        ruleNames.Add("INVDMarkerRules"); //6
        ruleNames.Add("INVDMarkerRules_2"); //0?
        ruleNames.Add("CalibrationNewRuleset"); //12
        ruleNames.Add("CalibrationNewRuleset_2"); //0?
        ruleNames.Add("RFlagCleanRuleset"); //1
        ruleNames.Add("ICFixTotalRuleset"); //12
        ruleNames.Add("TransformerFlipRuleset"); //1
        ruleNames.Add("TransformerFlipRuleset2"); //1
        ruleNames.Add("Clean23Ruleset"); //4
        ruleNames.Add("BeforeBG-VerifyDirRuleSet"); //8

        foreach(string str in ruleNames){
            await RuleSetMap.getInstance().loadRuleSet(str);
            loadPercent = Math.Floor((RuleSetMap.getInstance().getNumRules() / totalRules) * 100.0);
            base.StateHasChanged();
        }
    }

    public async void generateButtonClicked() {
        string xmlString = "";

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/basic-two-mass-system.bogl");
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);
        var graphs = BondGraphFactory.generateBondGraphs(sysDiagram.convertToDesignGraph());
        //var unsimplified = graphs.Item1;
        //var simplified = graphs.Item2;
        //var causal = graphs.Item3;

        var unsimplified = BondGraphEmbedder.embedBondGraph(graphs.Item1);
        var simplified = BondGraphEmbedder.embedBondGraph(graphs.Item2);
        var causal = graphs.Item3;


        List<string> causalOptions = new();
        foreach(BondGraph g in causal) {
            BondGraphEmbedder.embedBondGraph(g);
            causalOptions.Add(g.convertToJson());
        }

        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("displayUnsimplifiedBondGraph", unsimplified.convertToJson());
        await module.InvokeVoidAsync("displaySimplifiedBondGraph", simplified.convertToJson());
        await module.InvokeVoidAsync("displayCausalBondGraphOptions", causalOptions);
    }

    public async void loadFile() {
        string xmlString = "";
        if(!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/" + fileToLoad);
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    public async void loadBasicTwoMass() {
        string xmlString = "";
        if(!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/basic-two-mass-system.bogl");
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    public async void loadBasicTwoMass2() {
        string xmlString = "";
        if(!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/basic-two-mass-system1.bogl");
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    public async void loadBasicTwoMass3() {
        string xmlString = "";
        if(!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/basic-two-mass-system2.bogl");
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    public async void loadBasicQuarterCar() {
        string xmlString = "";
        if(!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/masses_on_a_spring.bogl");
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    public async void loadBasicMassSpringDirections(){
        string xmlString = "";
        if(!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/moving_masses.bogl");
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    public async void loadSpringAndDamper() {
        string xmlString = "";
        if(!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/spring_&_damper.bogl");
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    public async void loadRackandPinion() {
        string xmlString = "";
        if(!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/rack_pinion.bogl");
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    public async void loadMotorShaft() {
        string xmlString = "";
        if(!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/motor-gear-pair.bogl");
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    public async void loadLRCCircuit() {
        string xmlString = "";
        if(!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/lrc_circuit.bogl");
        xmlString= await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());       
    }

    public async void openBoGLFile() {
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        var file = await module.InvokeAsync<object>("openFile");
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(file.ToString());

        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    private Stream getFileStream(string fileData) {
        var testData = fileData;
        var fileStream = new MemoryStream(Encoding.ASCII.GetBytes(testData));

        return fileStream;
    }

    public async void saveAs() {
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        var file = await module.InvokeAsync<object>("getSystemDiagram");
        Console.WriteLine(file.ToString());

        //TODO Make this use the current system diagram
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromJSON(file.ToString());
        var fileStream = getFileStream(sysDiagram.generateBoGLString());
        var fileName = "SystemDiagram.bogl";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await module.InvokeVoidAsync("saveAsFile", fileName, streamRef);
    }
}
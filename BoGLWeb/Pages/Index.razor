@inject IJSRuntime JS
@inject NavigationManager NavManager
@page "/"
@using System.Text;
@using System.Diagnostics

<PageTitle>BoGLWeb</PageTitle>

<script suppress-error="BL9992" type="module" src="/build/build.js"></script>

<body>
    <div class="page">
        <main>
            <Menu Selectable=false Mode=MenuMode.Horizontal TriggerSubMenuAction=Trigger.Click>
                <li class="ant-menu-submenu ant-menu-submenu-horizontal boglLogo">
                    <img src="images/logo.png" width="50" />
                    <div id="logoSave">*</div>
                </li>
                <SubMenu title="File" Class="topMenu">
                    <MenuItem Key="setting:1">New</MenuItem>
                    <MenuItem Key="setting:2" OnClick="openBoGLFile">Open</MenuItem>
                    <MenuItem Key="setting:3" OnClick="save">Save</MenuItem>
                    <MenuItem Key="setting:4" OnClick="saveAs">Save As</MenuItem>
                    <MenuItem Key="setting:5">Export as Image</MenuItem>
                </SubMenu>
                <SubMenu title="Edit" Class="topMenu">
                    <MenuItem Key="setting:1">Cut</MenuItem>
                    <MenuItem Key="setting:2">Copy</MenuItem>
                    <MenuItem Key="setting:3">Paste</MenuItem>
                    <MenuItem Key="setting:4">Undo</MenuItem>
                    <MenuItem Key="setting:5">Redo</MenuItem>
                    <MenuItem Key="setting:6">Delete</MenuItem>
                </SubMenu>
                <SubMenu title="Help" Class="topMenu">
                    <MenuItem Key="setting:1"><Checkbox>Confirm deleting many items</Checkbox></MenuItem>
                    <MenuItem Key="setting:2">Tutorial</MenuItem>
                    <SubMenu Title="Example Files">
                        <SubMenu Title="Mechanical Translation">
                            <MenuItem Key="mt:1" OnClick='() => loadExample("basic-two-mass-system")'>Basic Two Mass System - 1</MenuItem>
                            <MenuItem Key="mt:2" OnClick='() => loadExample("basic-two-mass-system1")'>Basic Two Mass System - 2</MenuItem>
                            <MenuItem Key="mt:3" OnClick='() => loadExample("basic-two-mass-system2")'>Basic Two Mass System - 3</MenuItem>
                            <MenuItem Key="mt:4" OnClick='() => loadExample("masses_on_a_spring")'>Quarter Car Model</MenuItem>
                            <MenuItem Key="mt:5" OnClick='() => loadExample("moving_masses")'>Basic Mass, Spring System with Directions</MenuItem>
                            <MenuItem Key="mt:6" OnClick='() => loadExample("spring_&_damper")'>Spring and Damper with Force</MenuItem>
                        </SubMenu>
                        <SubMenu Title="Mechanical Rotation">
                            <MenuItem Key="mr:1" OnClick='() => loadExample("rack_pinion")'>Rack and Pinion System</MenuItem>
                            <MenuItem Key="mr:2" OnClick='() => loadExample("motor-gear-pair")'>Motor, Shaft and Gear Pair</MenuItem>
                        </SubMenu>
                        <SubMenu Title="Electrical">
                            <MenuItem Key="elec:1" OnClick='() => loadExample("lrc_circuit")'>LRC Circuit</MenuItem>
                        </SubMenu>
                    </SubMenu>
                    <MenuItem Key="setting:4" OnClick="reportBugs">Report Bugs</MenuItem>
                    <MenuItem Key="setting:5" OnClick="@(() => {_visible = true; })">About BoGL</MenuItem>
                </SubMenu>
                <li class="ant-menu-submenu ant-menu-submenu-horizontal iconDiv">
                    @{
                        RenderFragment SaveSvg =@<img class="menuIcon" src="images/menuBar/save.png" title="Save" />;
                        RenderFragment CutSvg =@<img class="menuIcon" src="images/menuBar/cut.png" title="Cut" />;
                        RenderFragment CopySvg =@<img class="menuIcon" src="images/menuBar/copy.png" title="Copy" />;
                        RenderFragment PasteSvg =@<img class="menuIcon" src="images/menuBar/paste.png" title="Paste" />;
                        RenderFragment UndoSvg =@<img class="menuIcon" src="images/menuBar/undo.png" title="Undo" />;
                        RenderFragment RedoSvg =@<img class="menuIcon" src="images/menuBar/redo.png" title="Redo" />;
                        RenderFragment TrashSvg =@<img class="menuIcon" src="images/menuBar/trash.png" title="Trash" />;
                    }
                    <Button Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="SaveSvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="CutSvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="CopySvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="PasteSvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="UndoSvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="RedoSvg" />
                    </Button>
                    <Button Disabled Shape="Square" Type="@ButtonType.Text" Size="@ButtonSize.Small">
                        <Icon Component="TrashSvg" />
                    </Button>
                </li>
            </Menu>
            <div class="pageContainer">
                <div id="graphMenu">
                    <Collapse Bordered="false">
                        <ExpandIconTemplate>
                            <Icon Type="down-circle" Rotate="@(context ? 180 : 0)" />
                        </ExpandIconTemplate>
                        <ChildContent>
                            <Panel Header="Basic Mechanical Translation" Key="1">
                                <div id="mechTrans" class="elementHolder"></div>
                            </Panel>
                            <Panel Header="Basic Mechanical Rotation" Key="2">
                                <div id="mechRot" class="elementHolder"></div>
                            </Panel>
                            <Panel Header="Transmission Elements" Key="3">
                                <div id="transElem" class="elementHolder"></div>
                            </Panel>
                            <Panel Header="Electrical" Key="3">
                                <div id="electrical" class="elementHolder"></div>
                            </Panel>
                            <Panel Header="Actuators" Key="3">
                                <div id="actuators" class="elementHolder"></div>
                            </Panel>
                        </ChildContent>
                    </Collapse>
                </div>
                <div class="card-container">
                    <Tabs Type="@TabType.Card">
                        <TabPane Key="1" Tab="System" ForceRender=true>
                            <div id="modifierMenu">
                                <Collapse Bordered="false" ExpandIconPosition="right" DefaultActiveKey="@(new[]{"1"})">
                                    <ChildContent>
                                        <Panel Header="Modifers" Key="1">
                                            <div id="modifierCheckboxWrapper">
                                                <Checkbox Checked="@checkValues[0]" Disabled="@disabledValues[0]" OnChange="b => { CheckChange(b, 0); }">Mass</Checkbox>
                                                <Checkbox Checked="@checkValues[1]" Disabled="@disabledValues[1]" OnChange="b => { CheckChange(b, 1); }">Inertia</Checkbox>
                                                <Checkbox Checked="@checkValues[2]" Disabled="@disabledValues[2]" OnChange="b => { CheckChange(b, 2); }">Stiffness</Checkbox>
                                                <Checkbox Checked="@checkValues[3]" Disabled="@disabledValues[3]" OnChange="b => { CheckChange(b, 3); }">Friction</Checkbox>
                                                <Checkbox Checked="@checkValues[4]" Disabled="@disabledValues[4]" OnChange="b => { CheckChange(b, 4); }">Damping</Checkbox>
                                                <Checkbox Checked="@checkValues[5]" Disabled="@disabledValues[5]" OnChange="b => { CheckChange(b, 5); }">Parallel</Checkbox>
                                                <Checkbox Checked="@checkValues[6]" Disabled="@disabledValues[6]" OnChange="b => { CheckChange(b, 6); }">Tooth Wear</Checkbox>
                                            </div>
                                            <hr />
                                            <div>
                                                <div style="font-size: 12px">Velocity Direction</div>
                                                <div id="velocities">
                                                    <div id="clearVelocityWrapper">
                                                        <Button Class="bogl_button">Clear<br />Velocity</Button>
                                                    </div>
                                                    <Button Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: -30px; left: 17px" Class="longArrow"><div class="arrowButton topArrow">⮢</div></Button>
                                                    <Button Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: -30px; right: 17px" Class="longArrow"><div class="arrowButton topArrow">⮣</div></Button>
                                                    <Button Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: -4px; right: -8px" Class="tallArrow"><div class="arrowButton sideTopArrow">⮥</div></Button>
                                                    <Button Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: 34px; right: -8px" Class="tallArrow"><div class="arrowButton">⮧</div></Button>
                                                    <Button Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: 62px; right: 17px" Class="longArrow"><div class="arrowButton bottomArrow">⮡</div></Button>
                                                    <Button Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: 62px; left: 17px" Class="longArrow"><div class="arrowButton bottomArrow">⮠</div></Button>
                                                    <Button Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: 34px; left: -8px" Class="tallArrow"><div class="arrowButton">⮦</div></Button>
                                                    <Button Type="@ButtonType.Text" Size="@ButtonSize.Large" Style="top: -4px; left: -8px" Class="tallArrow"><div class="arrowButton sideTopArrow">⮤</div></Button>
                                                </div>
                                            </div>
                                        </Panel>
                                    </ChildContent>
                                    <ExpandIconTemplate>
                                        <Icon Type="down-circle" Rotate="@(context ? 180 : 0)" Style="margin-top: 0; margin-right: 2px" />
                                    </ExpandIconTemplate>
                                </Collapse>
                            </div>
                            <div id="zoomMenu">
                                <Collapse Bordered="false" ExpandIconPosition="right" DefaultActiveKey="@(new[]{"1"})">
                                    <ChildContent>
                                       <div style="height: 300px; margin-left: 70px; display: inline-block;">
                                               <Slider TValue="double" Vertical DefaultValue="31" />
                                       </div> 
                                        <Button Type="@ButtonType.Primary" Loading="generatingBondGraph" Id="generateButton" Class="bogl_button">Generate</Button>
                                    </ChildContent>
                                    <ExpandIconTemplate>
                                        <Icon Type="down-circle" Rotate="@(context ? 180 : 0)" Style="margin-top: 0; margin-right: 2px" />
                                    </ExpandIconTemplate>
                                </Collapse>
                            </div>
                            <Button Type="@ButtonType.Primary" Loading="generatingBondGraph" Id="generateButton" Disabled="!allRulesLoaded" Class="bogl_button" @onclick="generateButtonClicked">Generate</Button>
                            @if (!allRulesLoaded) {
                                <p id="ruleLoadProgressText">Loading Rulesets:</p>
                                <Progress id="ruleLoadProgress" Percent=@loadPercent ShowInfo="false" TrailColor="#ededed" />
                            }
                            <div id="systemDiagram"></div>
                        </TabPane>
                        <TabPane Key="2" Tab="Unsimplified BG" ForceRender=true>
                            <div id="unsimpBG"></div>
                        </TabPane>
                        <TabPane Key="3" Tab="Simplified BG" ForceRender=true>
                            <div id="simpBG"></div>
                        </TabPane>
                        <TabPane Key="4" Tab="Causal BG" ForceRender=true>
                            <Select Id="causalSelect"
                                    TItem="Option"
                                    TItemValue="int"
                                    DataSource="@causalSwitchOptions"
		                            @bind-Value="@selectedCausalOption"
		                            DefaultValue="@(0)"
                                    ValueName="@nameof(Option.value)"
		                            LabelName="@nameof(Option.label)"
		                            Style="width:120px"
		                            OnSelectedItemChanged="ChangeCausalOption">
                            </Select>
                            <div id="causalBG"></div>
                        </TabPane>
                    </Tabs>
                </div>
            </div>
        </main>
    </div>
    <Modal Title="About BoGL Web" Visible="@_visible" OnOk="@handleOk" OnCancel="@handleOk">
        <div class="modal-body">
            <p>Original application developed by:</p>
            <p>Daniel Grande</p>
            <p>Felice Mancini</p>
            <p>Corey Alicchio</p>
            <p>Justin Vitiello</p>
            <p>Terry Hearst</p>
            <p>Talal Jaber</p>
            <p>Corrin Courville</p>
            <p>BoGL Web Developed by:</p>
            <p>Margaret Earnest</p>
            <p>Jakob Misbach</p>
            <p>Anthony Vuolo</p>
            <p>Advisors:</p>
            <p>Prof. David Brown</p>
            <p>Prof. Pradeep Radhakrishan</p>
            <p>Prof. Brigitte Servatius</p>
        </div>
    </Modal>
    <Modal Title="Error Loading .bogl File" Visible="@errorVisible" OnOk="@handleErrorOk" OnCancel="@handleErrorOk">
        <div class="modal-body">
            <p>@errorMessage</p>
        </div>
    </Modal>
    <Modal Title="Share SystemDiagram URL" Visible="@urlModalVisible" OnOk="@handleURLOk" OnCancel="@handleURLOk">
        <p>@url</p>
    </Modal>
</body>

@code {
    private bool generatingBondGraph;

    private static Index? _app;
    public class Option {
        public string label { get; set; }
        public int value { get; set; }
    }
    List<Option> causalSwitchOptions = new List<Option> { };
    int selectedCausalOption;
    List<string> causalOptions = new();

    public Index() {
        _app = this;
    }

    private static bool[] checkValues { get; set; } = { false, false, false, false, false, false, false };
    private static bool[] disabledValues { get; set; } = { false, false, false, false, false, false, false };

    [JSInvokable]
    public static void ClearCheckboxes() {
        for (int i = 0; i < Index.checkValues.Length; i++) {
            Index.checkValues[i] = false;
        }
        _app?.StateHasChanged();
    }

    [JSInvokable]
    public static void SetCheckboxes(int[] indeces) {
        for (int i = 0; i < Index.checkValues.Length; i++) {
            Index.checkValues[i] = indeces.Contains(i);
        }
        _app?.StateHasChanged();
    }

    public async void CheckChange(bool b, int i) {
        Index.checkValues[i] = b;
        var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
        await module.InvokeVoidAsync("setModifier", i, b);
    }

    public async void ChangeCausalOption(Option selection) {
        if (generatingBondGraph) {
            Console.WriteLine("Switched to " + selection.value);
            var module = await JS.InvokeAsync<IJSObjectReference>("backendManager.getBackendManager");
            await module.InvokeVoidAsync("displayCausalBondGraphOption", causalOptions, selection.value);
        }
    }

    private readonly List<string> ruleNames = new List<string>();
    private readonly double totalRules = 19.0;
    private string fileToLoad = "";
    private double loadPercent = 0;

    protected override async Task OnInitializedAsync() {
        allRulesLoaded = false;
        ruleNames.Add("BondGraphRuleset"); //58
        ruleNames.Add("SimplificationRuleset"); //28
        ruleNames.Add("DirRuleset"); //5
        ruleNames.Add("newDirectionRuleSet_2"); //17
        ruleNames.Add("DirRuleset3"); //4
        ruleNames.Add("Simplification2"); //32
        ruleNames.Add("NewCausalityMethodRuleset"); //6
        ruleNames.Add("NewCausalityMethodRuleset_2"); //4
        ruleNames.Add("NewCausalityMethodRuleset_3"); //2
        ruleNames.Add("INVDMarkerRules"); //6
        ruleNames.Add("INVDMarkerRules_2"); //0?
        ruleNames.Add("CalibrationNewRuleset"); //12
        ruleNames.Add("CalibrationNewRuleset_2"); //0?
        ruleNames.Add("RFlagCleanRuleset"); //1
        ruleNames.Add("ICFixTotalRuleset"); //12
        ruleNames.Add("TransformerFlipRuleset"); //1
        ruleNames.Add("TransformerFlipRuleset2"); //1
        ruleNames.Add("Clean23Ruleset"); //4
        ruleNames.Add("BeforeBG-VerifyDirRuleSet"); //8

        foreach (string str in ruleNames) {
            await RuleSetMap.getInstance().loadRuleSet(str);
            loadPercent = Math.Floor((RuleSetMap.getInstance().getNumRules() / totalRules) * 100.0);
            base.StateHasChanged();
        }

        allRulesLoaded = true;
        base.StateHasChanged();
    }

    public async Task generateButtonClicked() {
        generatingBondGraph = true;
        base.StateHasChanged();
        await Task.Delay(1);
        
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        var file = await module.InvokeAsync<object>("getSystemDiagram");

        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromJSON(file.ToString());
        Console.WriteLine("-------- SYSTEM DIAGRAM --------");
        Console.WriteLine(sysDiagram.generateBoGLString());
        var graphs = BondGraphFactory.generateBondGraphs(SystemDiagram.generateSystemDiagramFromXML(sysDiagram.generateBoGLString()).convertToDesignGraph());

        BondGraphEmbedder unsimplifiedEmbedder = new(graphs.Item1);

        while (!unsimplifiedEmbedder.isOptimized()) {
            base.StateHasChanged();
            await Task.Delay(1);
            unsimplifiedEmbedder.embedBondGraph();
        }
        var unsimplified = unsimplifiedEmbedder.getBondGraph();
        
        BondGraphEmbedder simplifiedEmbedder = new(graphs.Item2);

        while (!simplifiedEmbedder.isOptimized()) {
            base.StateHasChanged();
            await Task.Delay(1);
            simplifiedEmbedder.embedBondGraph();
        }
        
        var simplified = simplifiedEmbedder.getBondGraph();
        var causal = graphs.Item3;

        foreach (BondGraph g in causal) {
            BondGraphEmbedder causalEmbedder = new(g);

            while (!causalEmbedder.isOptimized()) {
                base.StateHasChanged();
                await Task.Delay(1);
                causalEmbedder.embedBondGraph();
            }     
            causalOptions.Add(causalEmbedder.getBondGraph().convertToJson());
        }

        await module.InvokeVoidAsync("displayUnsimplifiedBondGraph", unsimplified.convertToJson());
        await module.InvokeVoidAsync("displaySimplifiedBondGraph", simplified.convertToJson());
        await module.InvokeVoidAsync("displayCausalBondGraphOption", causalOptions, 0);
        causalSwitchOptions = Enumerable.Range(0, causalOptions.Count).ToList().Select(i => {
            return new Option { label = "Option " + (i + 1), value = i };
        }).ToList();
        generatingBondGraph = false;
        base.StateHasChanged();
    }

    /// <summary>
    /// Loads a file in the example directory
    /// </summary>
    /// <param name="filename">The name of the example file without .bogl</param>
    public async void loadExample(string filename) {
        string xmlString = "";
        if (!fileToLoad.Equals("")) {
            Console.WriteLine(fileToLoad);
        }

        HttpClient client = new HttpClient();
        HttpResponseMessage exampleResponse = await client.GetAsync("http://localhost:5006/examples/" + filename + ".bogl");
        xmlString = await exampleResponse.Content.ReadAsStringAsync();
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromXML(xmlString);

        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    private string errorMessage = "";
    
    public async void openBoGLFile() {
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        var file = await module.InvokeAsync<object>("openFile");
        SystemDiagram sysDiagram;
        try {
            sysDiagram = SystemDiagram.generateSystemDiagramFromXML(file.ToString());
        } catch (ArgumentException e) {
            errorVisible = true;
            errorMessage = e.Message;
            base.StateHasChanged();
            return;
        }

        await module.InvokeVoidAsync("loadSystemDiagram", sysDiagram.convertToJson());
    }

    private Stream getFileStream(string fileData) {
        var testData = fileData;
        var fileStream = new MemoryStream(Encoding.ASCII.GetBytes(testData));

        return fileStream;
    }
    
    public async void save() {
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        var file = await module.InvokeAsync<object>("getSystemDiagram");
        Console.WriteLine(file.ToString());

        //TODO Make this use the current system diagram
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromJSON(file.ToString());
        var fileStream = getFileStream(sysDiagram.generateBoGLString());
        var fileName = "SystemDiagram.bogl";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await module.InvokeVoidAsync("saveFile", fileName, streamRef);
    }

    public async void saveAs() {
        var module = await JS.InvokeAsync<IJSObjectReference>("window.backendManager.getBackendManager");
        var file = await module.InvokeAsync<object>("getSystemDiagram");

        //TODO Make this use the current system diagram
        SystemDiagram sysDiagram = SystemDiagram.generateSystemDiagramFromJSON(file.ToString());
        var fileStream = getFileStream(sysDiagram.generateBoGLString());
        var fileName = "SystemDiagram.bogl";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await module.InvokeVoidAsync("saveAsFile", fileName, streamRef);
    }

    public void reportBugs() {
        NavManager.NavigateTo("https://docs.google.com/forms/d/e/1FAIpQLSffPWzycTP4QXjOFTU0VCcUNcLwqEurq5vl44EDE-OqM7jqzQ/viewform");
    }

    public bool allRulesLoaded { get; set; } = false;

    bool _visible = false;

    private void handleOk() {
        _visible = false;
        base.StateHasChanged();
    }
    
    bool errorVisible = false;

    private void handleErrorOk() {
        errorVisible = false;
        base.StateHasChanged();
    }

    bool urlModalVisible = false;
    string url = "";

    private void handleURLOk() {
        urlModalVisible = false;
        base.StateHasChanged();
    }
}